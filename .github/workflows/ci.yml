name: ci

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write

jobs:

#  tests:
#
#    name: tests
#    runs-on: ubuntu-latest
#    container:
#      image: ghcr.io/andriykalashnykov/dlib-docker:v19.24.4@sha256:91ea2d6b8b86c52069db6a554442862897fb53ba7365f691500dc0f06fe4578f
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
#        with:
#          fetch-depth: 0
#
#      - name: Install Go
#        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
#        with:
#          go-version-file: 'go.mod'
#          cache: true
#
#      - name: Run ${{ matrix.name }} tests
#        run: |
#          go test --cover -parallel=1 -v -coverprofile=coverage.out -v ./...
#          go tool cover -func=coverage.out | sort -rnk3

  release-docker-images:

    if: github.ref_type == 'tag'
    runs-on: ${{ matrix.runner }}
#    needs: [ tests ]
    strategy:
      matrix:
        include:
#          - runner: ubuntu-latest
#            platforms: linux/arm/v7,linux/amd64
          - runner: macos-26
            platforms: linux/arm64

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Get Go version from go.mod
        run: |
          GO_VERSION=$(grep '^go ' go.mod | awk '{print $2}')
          echo "GO_VERSION=$GO_VERSION" >> $GITHUB_ENV

      - name: Convert owner to lower case
        shell: bash
        run: |
          echo "OWNER_LC=$(echo ${OWNER} | tr '[:upper:]' '[:lower:]')" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

#      - name: Install Docker via Colima
#        if: matrix.runner == 'macos-26' && github.ref_type == 'tag'
#        run: |
#          brew install docker docker-buildx orbstack
#          while ! docker info &> /dev/null; do sleep 2; done
#          lima lima-additional-guestagents qemu
#          limactl start --name=default --vm-type=qemu --cpus=2 --memory=4 template://docker
#          export DOCKER_HOST=unix://$HOME/.lima/default/sock/docker.sock

      - name: Install Docker Desktop (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew install --cask docker
          sudo /Applications/Docker.app/Contents/MacOS/Docker --unattended --install-privileged-components
          open -a /Applications/Docker.app --args --unattended --accept-license
          
          # Wait up to 5 minutes for Docker to start
          echo "Waiting for Docker..."
          for i in {1..60}; do
          if docker info &> /dev/null; then
           echo "Docker is ready!"
           break
          fi
          echo "Still waiting... ($i/60)"
          sleep 5
          done
          
          docker info

      - name: Set up QEMU
        if: matrix.runner == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: matrix.runner == 'ubuntu-latest'
        uses: docker/setup-buildx-action@v3

#      - name: Setup Colima and Docker (missing on MacOS)
#        if: matrix.runner == 'macos-26' && github.ref_type == 'tag'
#        run: |
#          # Install Colima (provides Docker daemon on macOS)
#          brew install colima docker docker-buildx qemu
#
#          # Start Colima with QEMU explicitly (more stable in CI)
#          colima start --cpu 4 --memory 4 --disk 100 --arch aarch64 --vm-type=qemu
#
#          # Create and use buildx builder
#          docker buildx create --use --name colima-builder --driver docker-container
#
#          # Verify Docker is working
#          docker info
#
#          # Login to GitHub Container Registry
#          echo "${{ secrets.GH_ACCESS_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
#
#      - name: Build and push images with Docker
#        if: matrix.runner == 'macos-26' && github.ref_type == 'tag'
#        run: |
#          # Build and push ARM64 image
#          docker buildx build \
#            --platform linux/arm64 \
#            -f Dockerfile \
#            --build-arg BUILDER_IMAGE=ghcr.io/andriykalashnykov/dlib-docker:v19.24.4 \
#            --build-arg GO_VER=${{ env.GO_VERSION }} \
#            -t ghcr.io/${{ env.OWNER_LC }}/go-face:arm64 \
#            -t ghcr.io/${{ env.OWNER_LC }}/go-face:${{ github.ref_name }} \
#            --push \
#            .

      - name: Login to Docker image repository
#        if: matrix.runner == 'ubuntu-latest'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_ACCESS_TOKEN }}

#      - name: GitHub Tag Name
#        run: |
#          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
#          echo "Tag name from github.ref_name: ${{  github.ref_name }}"

      - name: Build Docker meta
        id: meta
#        if: matrix.runner == 'ubuntu-latest'
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.OWNER_LC }}/go-face
          flavor: |
            latest=${{ matrix.runner == 'ubuntu-latest' }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=raw,value=arm64,enable=${{ matrix.runner == 'macos-26' }}
          labels: |
            org.opencontainers.image.vendor=Andriy Kalashnykov - andriykalashnykov@gmail.com
            org.opencontainers.image.title=Face recognition in Go with Dlib
            org.opencontainers.image.description=Face recognition in Go with Dlib
            org.opencontainers.image.licenses=CC0
            org.opencontainers.image.version=${{  github.ref_name }}"
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/AndriyKalashnykov/go-face/main/README.md
            io.artifacthub.package.maintainers=[{\"name\":\"Andriy Kalashnykov\",\"email\":\"andriykalashnykov@gmail.com\"}]
            io.artifacthub.package.license=CC0

      - name: Build and push Docker image
        id: docker_build
#        if: matrix.runner == 'ubuntu-latest'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platforms }}
          build-args: |
            BUILDER_IMAGE=ghcr.io/andriykalashnykov/dlib-docker:v19.24.4
            GO_VER=${{ env.GO_VERSION }}
          push: ${{ github.ref_type == 'tag' }}
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

#      - name: Output container image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}
